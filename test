#!/bin/sh
# Ensure we only test if the library has been built.
[ -d output ] || exit 1

test_out=output/test-output.csv

echo "Backend,Function,Time_in_s,V1,V2,V3,V4" > "$test_out"

# Run our two separate programs, each produces a CSV of their output with enough
# information that we can discern between the two.
export PYTHONPATH="$PWD/output"
printf "Fustal Time: "
python utils/timer.py ./tests/test.py >> "$test_out"
# We have to be a little hacky with R, but the main idea is to keep only the
# lines with the output, and then to properly format said lines.
printf "R Time: "
python utils/timer.py R --no-save < ./tests/test.R |
    grep '^\[1\]' |
    tr -d '\n' |
    sed 's/\[1] "/\nR /g' |
    sed 's/"\[1]//g' |
    tr -s ' ' |
    tr ' ' ',' >> "$test_out"

# Main testing code below. Check if differences exist between fustal and R.
{
e=0.00001 # Our value to denote a significant difference between two numbers.
echo "pass_or_fail,func,fustal_percent_change_in_runtime_compared_to_r,fustal_time_in_s,r_time_in_s" # TODO: log futhark & R version
funcs=$(grep "^py" "$test_out" | cut -d',' -f2)
for func in $funcs; do
    i=1
    pyt="$(grep "py,$func," "$test_out" | cut -d',' -f3)"   # *py*thon *t*ime
    Rt="$(grep "R,$func," "$test_out" | cut -d',' -f3)"     # *R* *t*ime
    pyv="$(grep "py,$func," "$test_out" | cut -d',' -f4-)," # *py*thon *v*ector
    Rv="$(grep "R,$func," "$test_out" | cut -d',' -f4-),"   # *R* *v*ector
    while true; do
        # NOTE: The addition of the '-s' ensures that we can leave the loop.
        pys=$(echo "$pyv" | cut -s -d',' -f"$i") # pys - *py*thon *s*calar
        Rs=$(echo "$Rv" | cut -s -d',' -f"$i")   # Rs - *R* *s*calar
        # If both pys & Rs have a value assosciated with them.
        if [ -n "$pys" ] && [ -n "$Rs" ]; then
            # Compute the difference between them.
            awk "BEGIN {d=$pys - $Rs; d=d*d; d=sqrt(d); if(d > $e) {exit 1}}"
            # If awk exists with the exit code of 0, then the test passed.
            # Also, this is intended, hence the shellcheck disable below.
            # shellcheck disable=2181
            if [ $? -eq 0 ]; then
                percent_decrease=$(awk "BEGIN{print (($pyt - $Rt) / $Rt) * 100}")
                echo "PASSED,$func,${percent_decrease},$pyt,$Rt"
            else
                echo "FAILED,$func,${percent_decrease},$pyt,$Rt"
                f=1
            fi
            # Increment i, to attempt to compare the next two numbers in
            # pyv & Rv
            i=$((i + 1))
        else
            # Otherwise, if pys or Rs has no value assosciated with it,
            # continue on to the next test.
            break
        fi
    done
done
} > output/test-results.csv; cat output/test-results.csv
exit "${f:-0}"
