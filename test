#!/bin/sh
# Ensure we only test if the library has been built.
[ -d output ] || exit 1

test_out=output/test-output.csv

# Run our two separate programs, each produces
# a CSV of their output with enough information
# that we can discern between the two.
export PYTHONPATH="$PWD/output"
echo "Fustal Time"
echo "-----"
time ./test.py > "$test_out"
echo "-----"
# We have to be a little hacky with R, but
# the main idea is to keep only the lines
# with the output, and then to properly format
# said lines.
echo "R Time"
echo "-----"
time R --no-save < test.R |
    grep '^\[1\]' |
    tr -d '\n' |
    sed 's/\[1] "/\nR /g' |
    sed 's/"\[1]//g' |
    tr -s ' ' |
    tr ' ' ',' >> "$test_out"

echo "-----"
# TODO: consider removing this check from the test suite...
py_lines=$(grep -c "^py" "$test_out")
R_lines=$(grep -c "^R" "$test_out")

# Make sure that each test is ran in both programs.
if ! [ "$py_lines" = "$R_lines" ]; then
    echo "There is a difference in the number of tests between the python & R versions"
    exit 1
fi

# Main testing code below. Check if there are any significant
# differences between the numbers that fustal returns vs R.

# TODO: consider rewriting the below code entirely in awk.

# Our value to denote a significant difference between two numbers.
e=0.00001

funcs=$(grep "^py" "$test_out" | cut -d',' -f2)
for func in $funcs; do
    i=1
    # pyv - *py*thon *v*ector
    # Rv - *R* *v*ector
    pyv="$(grep "py,$func," "$test_out" | cut -d',' -f3-),"
    Rv="$(grep "R,$func," "$test_out" | cut -d',' -f3-),"
    while true; do
        # pys - *py*thon *s*calar
        # Rs - *R* *s*calar
        # NOTE: The addition of the '-s' ensures that we can leave the loop.
        pys=$(echo "$pyv" | cut -s -d',' -f"$i")
        Rs=$(echo "$Rv" | cut -s -d',' -f"$i")
        # If both pys & Rs have a value assosciated with them.
        if [ -n "$pys" ] && [ -n "$Rs" ]; then
            # Compute the difference between them.
            awk "BEGIN {d=$pys - $Rs; d=d*d; d=sqrt(d); if(d > $e) {exit 1}}"
            # If awk exists with the exit code of 0, then the test passed.
            # Also, this is intended, hence the shellcheck disable below.
            # shellcheck disable=2181
            if [ $? -eq 0 ]; then
                echo "PASSED - $func"
            else
                echo "FAILED - $func"
                exit 1
            fi
            # Increment i, to attempt to compare the next two numbers in
            # pyv & Rv
            i=$((i + 1))
        else
            # Otherwise, if pys or Rs has no value assosciated with it,
            # continue on to the next test.
            break
        fi
    done
done
